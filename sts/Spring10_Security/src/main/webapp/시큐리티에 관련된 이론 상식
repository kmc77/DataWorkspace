1. 보안 관련 단어
	(1) 접근 주체(Principal) : 보호된 대상에 접근하는 유저
	
	(2) 인증(Authentication) : *현재 사용자가 누구인지 확인하는 과정으로 
							  일반적인 웹 애플리케이션은 아이디/비밀번호를 이용한 로그인과정을 통해 인증을 처리 합니다.
							  *애플리케이션의 작업을 수행할 수 있는 주체임을 증명합니다.
	(3) 인가(Authorization) : 현재 유저가 어떤 서비스, 페이지에 접근할 수 있는 권한이 있는지 검사합니다.
	
	
2. 스프링 시큐리티
	(1) Spring Security는 엔터프라이즈 애플리케이션에 대한 인증, 권한 부여 및 기타 보안 기능을 제공하는 Java / Java EE 프레임 워크입니다.
	
	(2) 스프링 시큐리티에서 우리가 사용하던 아이디는 username으로 사용합니다.
	
3. 회원가입을 위해 자료 입력 후 회원가입 버튼을 클릭하면 403오류 발생합니다.

4. 스프링 시큐리티 처리시 post 방식으로 접근하고자 하면 csrf토큰을 요구하기 때문입니다.

	(1) 시큐리티의 기본 설정은 csrf토큰 생성 활성화입니다.
	
	(2) 이것을 사용하지 않으려면 다음과 같이 작성하면 됩니다.
		<security:csrf disabled="true"/>
	(3) CSRF 공격(Cross Site Request Forgery:사이트간 요청 위조)
				웹 애플리케이션 취약점 중 하나로 인터넷 사용자(희생자)가 자신의 의지와는			
				무관하게 공격자가 의도한 행위(수정, 삭제, 등록 등)를 특정 웹사이트에 요청하게 만드는 공격입니다.
				서버에서 받아들이는 정보가 특별히 사전 조건을 검증하지 않는다는 단점을 이용한 공격 방식입니다.
				
			CSRF 공격이 이뤄지려면 다음 조건이 만족되어야 합니다.
			① 위조 요청을 전송하는 사이트에 피해자가 로그인 상태이고
			② 피해자는 공격자가 만든 피싱 사이트에 접속합니다.
				(공격자가 만든 게시물을 클릭하면서 자신도 모르게 공격자가 의도한 행위를 요청합니다.)
			=>조회성(HTTP GET Method) 데이터에는 방어 대상에 두지 않고,
					쓰기/변경이 가능한 POST Method에만 적용하면 됩니다.
					
					예) 피해자 A씨는 옥션에 로그인 상태입니다.
						피해자 A씨는 피싱 사이트에 접속합니다.
						이곳은 A씨가 자주 방문하는 곳으로 게시판의 글을 클릭합니다.
						그런데 게시판의 글에는 옥션에 접속해서 물건들을 주문할 수 있도록 코드가 작성된 것들이었습니다.
						옥션 사이트에서 접속을 통한 주문이 아닌 다른 사이트에서 옥션에 접속해서 주문한 일이 발생한 것입니다.
						아래 처럼 토큰을 서버에서 전송해서 토큰값을 확인하여 이 문제를 해결하빈다.
						
	(4) CSRF 토큰은 임의로 변하는 특정한 토큰값을 서버에서 체크하는 방식입니다.
	    ① 서버에는 브라우저에 데이터를 전송할 떄 CSRF토큰을 같이 전송합니다.
	    ② 사용자가 POST방식으로 작업할 때 브라우저에서 전송된 CSRF 코튼의 값과 서버가 보관하고 있는 토큰의 값을 비교합니다.
	    					만일 일치하지 않으면 403오류 발생합니다.
	    					
5. post 방식의 모든 품안에 추가합니다.
		<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}">	    					
	   					
				
										  