/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-31 02:47:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class member_005fupdateForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/2023_05_03/sts/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Spring4_MVC_BOARD/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1692760004745L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>회원관리 시스템 회원수정 페이지</title>\r\n");
      out.write("<link href=\"css/join.css\"      type=\"text/css\"      rel =\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("h3 {\r\n");
      out.write("		text-align: center;	color: #1a92b9;\r\n");
      out.write("}\r\n");
      out.write("input[type=file]{\r\n");
      out.write("  display:none;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../board/header.jsp", out, false);
      out.write("\r\n");
      out.write("<form name=\"joinform\" action=\"updateProcess\"  method=\"post\"    enctype=\"multipart/form-data\">\r\n");
      out.write("	<h3>회원 정보 수정</h3>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<b>아이디</b>\r\n");
      out.write("	<input type=\"text\" name=\"id\" placeholder=\"Enter id\"\r\n");
      out.write("		value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${memberinfo.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" required readonly>\r\n");
      out.write("	\r\n");
      out.write("	<b>비밀번호</b>\r\n");
      out.write("	<input type=\"password\" name=\"pass\"  maxlength=10\r\n");
      out.write("		value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${memberinfo.password}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" placeholder=\"Enter password\" readonly>\r\n");
      out.write("	  \r\n");
      out.write("	<b>이름</b>\r\n");
      out.write("	<input type=\"text\" name=\"name\"  \r\n");
      out.write("			value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${memberinfo.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" placeholder=\"Enter name\" required>\r\n");
      out.write("	\r\n");
      out.write("	<b>나이</b>\r\n");
      out.write("	<input type=\"text\" name=\"age\"    \r\n");
      out.write("	value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${memberinfo.age}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"  maxlength=\"2\" placeholder=\"Enter age\"   required>\r\n");
      out.write("	       \r\n");
      out.write("	<b>성별</b>\r\n");
      out.write("	  <div>	\r\n");
      out.write("		<input type=\"radio\" name=\"gender\" value=\"남\" ><span>남자</span>\r\n");
      out.write("		<input type=\"radio\" name=\"gender\" value=\"여\" ><span>여자</span>\r\n");
      out.write("	  </div>\r\n");
      out.write("	<b>이메일 주소</b>\r\n");
      out.write("	  <input type=\"text\" name=\"email\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${memberinfo.email}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" placeholder=\"Enter email\" \r\n");
      out.write("	          required><span id=\"email_message\"></span>\r\n");
      out.write("	          \r\n");
      out.write("	<div class=\"clearfix\">\r\n");
      out.write("	 <button type=\"submit\" class=\"submitbtn\">수정</button>\r\n");
      out.write("	 <button type=\"button\" class=\"cancelbtn\">취소</button>\r\n");
      out.write("	</div>\r\n");
      out.write("</form>\r\n");
      out.write("<script>\r\n");
      out.write("  //성별 체크해주는 부분\r\n");
      out.write("  $(\"input[value='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${memberinfo.gender}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("']\").prop('checked',true);\r\n");
      out.write("  \r\n");
      out.write("  $(\".cancelbtn\").click(function(){\r\n");
      out.write("		history.back();\r\n");
      out.write("  }); \r\n");
      out.write("  \r\n");
      out.write("  //처음 화면 로드시 보여줄 이메일은 이미 체크 완료된 것이므로 기본  checkemail=true입니다.\r\n");
      out.write("  let checkemail=true;\r\n");
      out.write("  $(\"input[name=email]\").on('keyup',\r\n");
      out.write("			function() {\r\n");
      out.write("				$(\"#email_message\").empty();\r\n");
      out.write("				//[A-Za-z0-9_]와 동일한 것이  \\w\r\n");
      out.write("				//+는 1회 이상 반복을 의미합니다. {1,}와 동일합니다.\r\n");
      out.write("				//\\w+ 는 [A-Za-z0-9_]를 1개이상 사용하라는 의미입니다.\r\n");
      out.write("				const pattern = /^\\w+@\\w+[.]\\w{3}$/;\r\n");
      out.write("				const email = $(\"input:eq(6)\").val();\r\n");
      out.write("				if (!pattern.test(email)) {\r\n");
      out.write("					$(\"#email_message\").css('color', 'red').html(\"이메일형식이 맞지 않습니다.\");\r\n");
      out.write("					checkemail=false;\r\n");
      out.write("				}else{\r\n");
      out.write("					$(\"#email_message\").css('color', 'green').html(\"이메일형식에 맞습니다.\");\r\n");
      out.write("					checkemail=true;\r\n");
      out.write("				}\r\n");
      out.write("			});//email keyup 이벤트 처리 끝\r\n");
      out.write("			\r\n");
      out.write("  $('form[name=joinform]').submit(function(){\r\n");
      out.write("	  if (!$.isNumeric($(\"input[name='age']\").val())) {\r\n");
      out.write("		  alert(\"나이는 숫자를 입력하세요\");\r\n");
      out.write("		  $(\"input[name='age']\").val('').focus();\r\n");
      out.write("		  return false;\r\n");
      out.write("	  }\r\n");
      out.write("	  \r\n");
      out.write("	  if(!checkemail){\r\n");
      out.write("			alert(\"email 형식을 확인하세요\");\r\n");
      out.write("			$(\"input[name=email]\").focus();\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("  })//submit()\r\n");
      out.write("  \r\n");
      out.write("  $('input[type=file]').change(function(event){\r\n");
      out.write("		  const inputfile = $(this).val().split('\\\\');\r\n");
      out.write("		  const filename=inputfile[inputfile.length - 1];//inputfile.length - 1=2\r\n");
      out.write("		  \r\n");
      out.write("		  const pattern = /(gif|jpg|jpeg|png)$/i;//i(ignore case)는 대소문자 무시를 의미\r\n");
      out.write("		  if (pattern.test(filename)) {\r\n");
      out.write("				$('#filename').text(filename);\r\n");
      out.write("		        \r\n");
      out.write("				const reader = new FileReader(); //파일을 읽기 위한 객체 생성		       \r\n");
      out.write("		     \r\n");
      out.write("				/*\r\n");
      out.write("				  1. readAsDataURL()\r\n");
      out.write("				    ① readAsDataURL(): FileReader 객체의 메서드로, 선택한 파일을 데이터 URL로 읽도록 요청합니다.\r\n");
      out.write("				    ② DataURL 형식으로 읽어온 결과는 reader객체의 result 속성에 저장됩니다.\r\n");
      out.write("				    ③ DataURL 형식은 접두사 data:가 붙은 URL이며 바이너리 파일을 Base64로 인코딩하여 \r\n");
      out.write("				      ASCII 문자열 형식으로 변환합니다.\r\n");
      out.write("				    ④ Base64 인코딩은 바이너리 데이터를 Text로 변경하는 Encoding으로 \r\n");
      out.write("				      이를 사용하면 웹 브라우저에서 이미지 등의 파일을 미리보기 기능을 제공할 수 있습니다.\r\n");
      out.write("				  \r\n");
      out.write("				  2. event.target.files[0] :  파일 리스트에서 첫번째 객체를 가져옵니다\r\n");
      out.write("				*/\r\n");
      out.write("			   reader.readAsDataURL(event.target.files[0]);\r\n");
      out.write("		       \r\n");
      out.write("		       reader.onload = function() {//읽기에 성공했을 때 실행되는 이벤트 핸들러	\r\n");
      out.write("		         $('#showImage > img').attr('src', this.result);\r\n");
      out.write("		       }; \r\n");
      out.write("			}else{\r\n");
      out.write("				alert('이미지 파일(gif,jpg,jpeg,png)이 아닌 경우는 무시됩니다.');\r\n");
      out.write("				$(this).val('')  \r\n");
      out.write("		    }\r\n");
      out.write("  })//change()\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
