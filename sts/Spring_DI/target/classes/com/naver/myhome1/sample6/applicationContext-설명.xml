<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	해당 패키지에서 New -> Other -> Spring Bean Configuration File -> Next
	-> applicationContext 입력 -> Next -> beans 클릭 -> Finish
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd">
    
    <!-- 
    	3. 의존성 주입(Dependency Infection : DI) :
    	- 객체 사이의 의존 관계를 자기 자신이 아닌 외부에 의해서 설정된다는 개념으로 
    	의존하는 객체를 직접 생성하지 않고 의존 객체를 전달받는 방식을 사용합니다.
    	
    	(1) 생성자를 이용한 주입(constructor DI) :
    	생성자를 통해서 의존 관계를 연결시키는 것으로 생성자를 사용합니다.
    	- 생성자 argument가 한 개인 경우
    	<constructor-arg>
    		<value>Sprion</value>
    	</constructor-arg>
    	같은 의미로
    	<	constructor-arg value="Spring"/> 사용합니다.
    	
    	-생성자 argument가 두 개인 경우
    	(index 속성을 이용하여 몇 번째 인수에 값을 전달할 것인지를 지정합니다.)
    	<constructor-arg index="0">
    		<value>Sprion</value>
    	</constructor-arg>
    	
    	<constructor-arg index="1">
    		<value>25</value>
    	</constructor-arg>
    	
    	(2) property를 이용한 주입(property DI) :
    		클래스의 의존 관계를 연결시키기 위해서 setter 메서드를 이용합니다.
    		반드시 프로퍼티 setter메서드가 있어야 사용 가능합니다.
    		name 속성 : setter메서드의 프로퍼티 이름
    		
    		<property name="greeting">
    		<value>안녕하세요!</value>
    	</property>
    	같은 의미로
    	<property name="greeting" value="안녕하세요!"/>
    	==> setGreeting()멧드에 값을 저장합니다.
    	
    	//아래 메서드가 존재해야 합니다.
    	//property greeting 의 setter 메서드를 호출합니다.
    	pulic void setGreeting (String greeting) {
    	this.greeting = greeting;
    	}
    	
    	4. IOC(Inversion of Control:제어의 역행)
    		자신이 사용할 오브젝트를 개발자가 생성하고 의존관계를 연결시키는 등
    		제어권을 개발자가 직접 갖고 있었지만 스프링에서는 객체에 대한 제어권이 컨테이너에게 넘어가면서
    		객체의 생명주기를 관리하는 권한 또한 컨테이너가 전담합니다.
    		이처럼 객체의 생성에서부터 생명주기의 관리까지 모든 객체에 대한 제어권이 바뀐것을 의미합니다.
    		
    		
    		
    1. IoC 컨테이너 (스프링 컨테이너)
    	1) BeanFactory (스프링의 IoC를 담당하는 핵심 컨테이너)
    	   - 빈을 등록/생성/조회/반환/관리 합니다.
    	   
    	2) ApplicationContext(BeanFactory를 확장한 IoC 컨테이너)
    	   - 빈을 등록/생성/조회/반환/관리하는 기능은 BeanFactory와 같지만
    	     트랜잭션 관리나 메시지 기반의 다국어 처리 등 다양한 기능을 제공합니다.
    	     
    2. XML 기반 빈 관리 컨테이너로 ApplicationContext 사용기
    	스프링에서는 자바 객체를 빈(Bean)이라고 합니다.
    	그래서 객체 관리 컨테이너를 "빈 컨테이너" 또는 IoC 컨테이너 라고 부릅니다.
    	스프링은 IoC 컨테이너가 갖추어야 할 기능들을 ApplicationContext 인터페이스에 정의해 두었습니다.
    	(org.springframework.context.ApplicationContext 빈 컨테이너가 갖추어야 할 기능을 선언한 인터페이스 입니다.)
    	
    	주요 구현체들
    		1)
    		- ClassPathXmlApplicationContext : 클래스 경로에 있는 빈 설정 XML파일을 찾습니다.
    		- FileSystemXmlApplicationContext : 파일 시스템 경로에 있는 빈 설정 파일 XML파일을 찾습니다.
    		==>
    			GenericXmlApplicationContext(3.0부터 추가) 가 위 두 가지 컨테이너 클래스가 제공하는 방식을 모두 제공
    			
    		2) XmlWebApplicationContext
    		: 웹 애플리케이션을 위한 IoC컨테이너로 web.xml 파일에 설정된 정보에 따라 XML		        		
     -->
     
     <bean id="m2" class="com.naver.myhome1.sample4"
  
</beans>
